from dotenv import load_dotenv
import os
load_dotenv()
print("Current Working Directory:", os.getcwd())
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../data-service")))
from data_interface import MongoDB
from vector_store.vectordb import VectorDB
from vector_store.version_manager import get_version_timestamp
import numpy as np
try:
    DB_URL = os.environ.get('TRAVELDB_URL')
    db = MongoDB(DB_URL, "travel_db", "locations")
except Exception as e:
    print(f"Error initializing MongoDB: {e}")
# db.db # db.collection
# kh·ªüi t·∫°o source
manager = VectorDB()
model = manager.embedding_model
mock_data = {
"name": "Tr·∫£ng C·ªè B√π L·∫°ch",
"address": "Th√¥n 7, x√£ ƒê·ªìng Nai, huy·ªán B√π ƒêƒÉng, t·ªânh B√¨nh Ph∆∞·ªõc, Vi·ªát Nam",
"description": "Tr·∫£ng C·ªè B√π L·∫°ch l√† m·ªôt th·∫£o nguy√™n r·ªông kho·∫£ng 500 ha...",
"image_url": "https://tse3.mm.bing.net/th?id=OIP.w3Gngig-IiMeqb4bw0NTUwHaFD&pid=Api"
}    
name_encode = mock_data['name']
address_encode = mock_data['address']
description_encode = mock_data['description']
faiss_name = get_version_timestamp()
merge_text = name_encode + " " + address_encode + " " + description_encode
print(merge_text)
try:
    result = manager.ingest(
        source=merge_text,
        faiss_name=faiss_name,
    )
    print(f"Data ingested successfully.")
except Exception as e:
     print(f"‚ùå Error processing {merge_text}: {str(e)}")
# search
print("üîé T√¨m ki·∫øm theo entities:")
try:
    results = manager.search(
        faiss_name=faiss_name,
        query="B√¨nh ph∆∞·ªõc",
        top_k=1,
        threshold=0.6  # Ng∆∞·ª°ng similarity
    )
    
    for result in results:
        print(f"\nüîç Score: {result["score"]:.4f}")
        print(result["content"])
        print(result["source"])

except Exception as e:
    print(f"Search error: {str(e)}")
for items in db.collection.find():
    print(items)
    break