import subprocess
import json
import re
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
from typing import List, Dict, Optional
import datetime
class OllamaTourismProcessor:
    def __init__(self, ollama_path: str, model_name: str = "mistral"):
        self.ollama_path = ollama_path
        self.model_name = model_name
        
        self.TOURISM_TEMPLATE = """<<SYS>>
B·∫°n l√† m·ªôt h·ªá th·ªëng AI, ch·ªâ xu·∫•t ra JSON, kh√¥ng tr·∫£ l·ªùi b·∫•t k·ª≥ th√¥ng tin g√¨ kh√°c ngo√†i JSON.

D∆∞·ªõi ƒë√¢y l√† th√¥ng tin ƒë·ªãa ƒëi·ªÉm. D·ª±a tr√™n th√¥ng tin ƒë·∫ßu v√†o, h√£y tr·∫£ v·ªÅ m·ªôt JSON v·ªõi c√°c th√¥ng tin nh∆∞ sau:

{input_data}

Th√¥ng tin c·∫ßn tr·∫£ v·ªÅ trong ƒë·ªãnh d·∫°ng JSON:

```json
{{
    "name": "{name}",
    "address": "{address}",
    "category": "{category}",
    "coordinates": {coordinates},
    "description": "{description}",
    "image_url": "{image_url}",
    "type": "location"
}}
"""
    def call_ollama(self, prompt: str) -> Optional[Dict]:
        try:
            result = subprocess.run(
                [self.ollama_path, "run", self.model_name],
                input=prompt.encode("utf-8"),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=120*2
            )
            stdout = result.stdout.decode().strip()
            stderr = result.stderr.decode().strip()
            print(f"STDOUT:\n{stdout}")
            print(f"STDERR:\n{stderr}")

            # Th·ª≠ parse JSON t·ª´ code block
            json_match = re.search(r'```json\n(.*?)\n```', stdout, re.DOTALL)
            if json_match:
                return json.loads(json_match.group(1))

            # Th·ª≠ parse JSON tr·ª±c ti·∫øp
            try:
                return json.loads(stdout)
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ parse JSON t·ª´ output:\n{stdout[:500]}...")
                return None

        except subprocess.TimeoutExpired:
            print("üïí Timeout khi g·ªçi Ollama")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ªçi Ollama: {str(e)}")
            return None

    def generate_input_str(self, entry):
        """
        Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o t·ª´ entry
        
        Args:
            entry: Dict ch·ª©a th√¥ng tin ƒë·ªãa ƒëi·ªÉm
            
        Returns:
            Chu·ªói prompt ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
        """
        location_parts = [
            entry.get("admin_level_3", ""),  # C·∫•p x√£
            entry.get("admin_level_2", ""),  # C·∫•p huy·ªán
            entry.get("admin_level_1", "")   # C·∫•p t·ªânh
        ]
        location = ", ".join(filter(None, location_parts))

        # T·∫°o chu·ªói input_str
        input_str = (
            f"Th√¥ng tin ƒëi·ªÉm ƒë·∫øn:\n"
            f"- T√™n: {entry.get('name', 'Kh√¥ng r√µ')}\n"
            f"- Lo·∫°i: {entry.get('category', 'ƒë·ªãa ƒëi·ªÉm du l·ªãch')}\n"
            f"- V·ªã tr√≠: {location}\n"
            f"- T·ªça ƒë·ªô: {entry.get('coordinates', [0, 0])}\n"
            f"- M√¥ t·∫£: {entry.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')}\n"
            f"- URL h√¨nh ·∫£nh: {entry.get('image_url', 'Kh√¥ng c√≥ URL h√¨nh ·∫£nh')}\n"
        )

        # Tr·∫£ v·ªÅ chu·ªói ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng cho TOURISM_TEMPLATE
        return self.TOURISM_TEMPLATE.format(
            input_data=input_str,
            name=entry.get("name", "Kh√¥ng r√µ"),
            address=location,
            category=entry.get("category", "ƒë·ªãa ƒëi·ªÉm du l·ªãch"),
            coordinates=entry.get("coordinates", [0, 0]),
            description=entry.get("description", "Kh√¥ng c√≥ m√¥ t·∫£"),
            image_url=entry.get("image_url", "Kh√¥ng c√≥ URL h√¨nh ·∫£nh")
        )

    def process_single_entry(self, entry: Dict) -> Dict:
        """
        X·ª≠ l√Ω m·ªôt entry du l·ªãch
        
        Args:
            entry: Dict ch·ª©a th√¥ng tin ƒë·ªãa ƒëi·ªÉm
            
        Returns:
            Dict k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        """
        try:
            # Chu·∫©n b·ªã prompt
            prompt = self.generate_input_str(entry)  # S·ª≠a l·∫°i ƒë√¢y
            
            # G·ªçi Ollama
            response = self.call_ollama(prompt)
            
            if not response:
                return {
                    **entry,
                    "error": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Ollama",
                    "processed": False
                }
                
            # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng description
            description = response.get("description", "")
            if len(description.split()) < 3:
                raise ValueError("M√¥ t·∫£ qu√° ng·∫Øn")
                
            return {
                **entry,
                **response,
                "processed": True
            }
            
        except Exception as e:
            return {
                **entry,
                "error": str(e),
                "processed": False
            }

    def process_batch(self, entries: List[Dict]) -> List[Dict]:
        """
        X·ª≠ l√Ω m·ªôt batch d·ªØ li·ªáu
        
        Args:
            entries: Danh s√°ch c√°c entry c·∫ßn x·ª≠ l√Ω
            
        Returns:
            Danh s√°ch k·∫øt qu·∫£ ƒë√£ x·ª≠ l√Ω
        """
        print(f"X·ª≠ l√Ω {len(entries)} entries")
        with ThreadPoolExecutor() as executor:
            results = list(tqdm(
                executor.map(self.process_single_entry, entries),
                total=len(entries),
                desc="ƒêang x·ª≠ l√Ω c√°c m·ª•c"
            ))
        return results

    def save_results(self, results, output_file):
        """
        Ph∆∞∆°ng th·ª©c l∆∞u k·∫øt qu·∫£ v√†o file JSON
        
        Args:
            results: D·ªØ li·ªáu c·∫ßn l∆∞u
            output_file: ƒê∆∞·ªùng d·∫´n file ƒë·∫ßu ra
        """
        print(f"K·∫øt qu·∫£ tr∆∞·ªõc khi l∆∞u:\n{json.dumps(results, ensure_ascii=False, indent=2)}")
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
                print(f"Results saved to {output_file}")
        except Exception as e:
            print(f"Error saving results: {e}")

# D·ªØ li·ªáu m·∫´u
sample_data = [
    {
        "name": "X√≥m Mui",
        "category": "town",
        "coordinates": [104.7305, 8.6061],
        "admin_level_1": "Ca Mau",
        "admin_level_2": "Ngoc Hien District",
        "admin_level_3": "Vien An Dong"
    },
    {
        "name": "M≈©i C√† Mau",
        "category": "tourist_spot",
        "coordinates": [104.7266, 8.6225],
        "admin_level_1": "Ca Mau",
        "admin_level_2": "Ngoc Hien District",
        "admin_level_3": "Dat Mui"
    }
]
print("D·ªØ li·ªáu ƒë·∫ßu v√†o:", json.dumps(sample_data, ensure_ascii=False, indent=2))
# ƒê·ªãnh nghƒ©a c√°c bi·∫øn c·∫ßn thi·∫øt
OLLAMA_PATH = r"C:\Users\21520\AppData\Local\Programs\Ollama\ollama.exe"  # Thay b·∫±ng ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø
MODEL_NAME = "mistral"  # Thay b·∫±ng t√™n model th·ª±c t·∫ø
timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
OUTPUT_FILE = f"travel_{timestamp}.json"  # ƒê∆∞·ªùng d·∫´n file ƒë·ªÉ l∆∞u k·∫øt qu·∫£

# Kh·ªüi t·∫°o processor
processor = OllamaTourismProcessor(OLLAMA_PATH, MODEL_NAME)

# X·ª≠ l√Ω d·ªØ li·ªáu
results = processor.process_batch(sample_data)

# L∆∞u k·∫øt qu·∫£
processor.save_results(results, OUTPUT_FILE)
